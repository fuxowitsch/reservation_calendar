==ReservationCalendar

Easily show multiple, overlapping reservations across calendar days and rows.

Based on Jeff Schuil's Event Calendar: http://github.com/elevation/event_calendar
The difference between this and his is in the underlying model that this one supports.

Jeff's Event Calendar calls for an underlying model class in which each instance
has a start date and an end date.

This calendar works from an underlying model class in which each instance that
contains any number and assortment of child individual date objects. It also
creates a model with a foreign key out to some object of your choice that must
implement the :display_name method.  The idea is that since this is a reservation
calendar, each reservation is a reservation of some actual thing, and that
thing's name should be displayed in the calendar.


After install, the "calendar" method will be available within your views.

To customize the look, modify the included stylesheet and/or change the default options.


==Install

  script/plugin install git@github.com:broughten/reservation_calendar.git


To generate the necessary static files AND the example below:

  script/generate reservation_calendar

Options:

* --static-only: Only generate the stylesheet and javascript
* --use-jquery: Generate jquery javascript

You can change the default reservation model name (Reservation), child date model name (ReservedDate) and view name (Calendar) by passing in two name arguments:

  script/generate reservation_calendar ReservationModel ChildDateModel ViewName
  

==Generated Files

Make sure to include the stylesheet and javascript in your layout/view.

====Static files

  public/stylesheets/reservation_calendar.css
  public/javascripts/reservation_calendar.js

Unless the --static-only option is given, the following will be generated. Names will differ if name arguments were passed to the generator.

====db/migrate/XXXX_create_reservations_and_dates.rb

class CreateReservationsAndDates < ActiveRecord::Migration
  def self.up
    create_table :reservations do |t|
      t.string :name
      t.timestamps
    end
    create_table :reserved_dates do |t|
      t.column :reservation_id, :integer
      t.column :date, :date
      t.timestamps
    end
  end

  def self.down
    drop_table :reserved_dates
    drop_table :reservations
  end
end

A reservation can also have a *color* field (hex value stored as a string) which determines the color of the reservation.
Or simply override the default virtual attribute on the model. For example, if reservations are associated to a calendar model, then the reservations can get their color from the calendar.


====app/models/reservation.rb
  
  class Reservation < ActiveRecord::Base
    has_reservation_calendar

	  has_many :reserved_dates, :order => :date
	  validates_length_of :reserved_dates, :minimum => 1, :message => 'must contain at least %d reserved_date'
  end

====config/routes.rb

  map.calendar 'calendar', :controller => 'calendar', :action => 'index', :year => Time.zone.now.year, :month => Time.zone.now.month
  map.connect '/calendar/:year/:month', :controller => 'calendar', :action => 'index', :year => Time.zone.now.year, :month => Time.zone.now.month
 	map.resource :reservation

====app/controllers/calendar_controller.rb
  
  class CalendarController < ApplicationController

    def index
      @month = params[:month].to_i
      @year = params[:year].to_i

      @shown_month = Date.civil(@year, @month)

      @reservation_strips = Reservation.reservation_strips_for_month(@shown_month)

			respond_to do |format|
	      format.html # index.html.erb
	    end
    end

  end

====app/controllers/reservations_controller.rb

class ReservationsController < ApplicationController
  
	# GET /reservations/1
  def show
    @reservation = Reservation.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
    end
  end
  
end

====app/helpers/calendar_helper.rb

Some helper methods are created, but you could put this in the view. The key is our calendar method, which takes some options.

  module CalendarHelper
    def month_link(month_date)
      link_to(month_date.strftime("%B"), {:month => month_date.month, :year => month_date.year})
    end
  
    # custom options for this calendar
    def reservation_calendar_options
      { 
        :year => @year,
        :month => @month,
        :reservation_strips => @reservation_strips,
        :month_name_text => @shown_month.strftime("%B %Y"),
        :previous_month_text => "<< " + month_link(@shown_month.last_month),
        :next_month_text => month_link(@shown_month.next_month) + " >>"
      }
    end

    def reservation_calendar
      calendar reservation_calendar_options do |reservation|
        %(<a href="/reservations/#{reservation.id}" title="#{h(reservation.name)}">#{h(reservation.name)}</a>)
      end
    end
  end
  
Notice you can pass in a block to the calendar method. In this example I'm passing a link to the reservation details, and displaying the reservation's name.

====app/views/calendar/index.html.erb

Then in calendar view, simply:

  <%= reservation_calendar %>

Specs:

The generator will also generate RSpec specs for all of the generated models, helpers and controllers.


==Default Options

The default options for the calendar are:

  defaults = {
    :year => Time.zone.now.year,
    :month => Time.zone.now.month,
    :abbrev => (0..2),
    :first_day_of_week => 0, # See note below when setting this
    :show_today => true,
    :month_name_text => Time.zone.now.strftime("%B %Y"),
    :previous_month_text => nil,
    :next_month_text => nil,
    :reservation_strips => [],
    
    # it would be nice to have these in the CSS file
    # but they are needed to perform height calculations
    :width => nil,
    :height => 500, 
    :day_names_height => 18,
    :day_nums_height => 18,
    :reservation_height => 18,
    :reservation_margin => 1,
    :reservation_padding_top => 1,
    
    :use_javascript => true,
    :link_to_day_action => false
  }
  
You can override any of these by passing your options to the calendar method. In the above example, update the reservation_calendar_options helper method.

====Details

* See the notes in the plugin's calendar_helper.rb for more info.

* *width*: Optional, if none is given it will stretch to the containing element.

* *height*: Defaults to 500px. This is the approx minimum total height of the calendar. It could be greater if a calendar row(s) need to stretch to fit additional reservations.

* *use_javascript*: If you set it to false, cleaner HTML will be output, without inline Javascript, but reservations spanning multiple days will not be displayed correctly. This option should therefore only be used if your calendar uses only single-day reservations.

* *link_to_day_action*: Will make the calendar's day numbers links to the given Rails action. Note, you'll probably want a corresponding route, controller action, and view to go with this action. Example:
  
  Helper/View calendar option:
    :link_to_day_action => "day"
  
  Route (the controller is the same as your other calendar route):
    map.calendar_day "/calendar/:year/:month/:day", :controller => "calendar", :action => "day"


==Notes

* If you want to change the <b>first day of the week</b> from the default of Sunday (0), then set the new value in an instance variable and pass it to reservation_strips_for_month (in the controller), and to the reservation calendar options (in the helper/view).

  Controller:
    @first_day_of_week = 1
    @reservation_strips = Reservation.reservation_strips_for_month(@shown_month, @first_day_of_week)
  
  Helper/View calendar options:
    :first_day_of_week => @first_day_of_week
    
* If you need access to the reservations, not just the reservation strips, then instead of calling reservation_strips_for_month call these 3 methods:

    start_d, end_d = Reservation.get_start_and_end_dates(@shown_month) # optionally pass in @first_day_of_week
    @reservations = Reservation.reservations_for_date_range(start_d, end_d)
    @reservation_strips = Reservation.create_reservation_strips(start_d, end_d, @reservations)

* The reservation <b>select color</b> is set in the reservation_calendar.js file.
  

==Contributors

* Jeff Schuil (original author)
* Jon Christensen (modified to reservation from events)
* See commit history for list of additional contributors.
* Thanks to those who have added features, fixed bugs, and/or reported issues.

== History

* Though ReservationCalendar has diverged greatly, it was...
* Originally based off of James Urquhart's http://www.cuppadev.co.uk/webdev/making-a-real-calendar-in-rails/
* This in turn started as Geoffrey Grosenbach's CalendarHelper.

Copyright (c) 2009 Kelsus Inc, released under the MIT license
