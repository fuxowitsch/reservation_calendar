require 'spec_helper'

describe <%=class_name.classify%> do

  it "should create a vaild model from blueprint" do
    <%=class_name%> = <%=class_name.classify%>.make()
    <%=class_name%>.should be_valid
  end

  describe "associations" do

    it "should have many reserved dates" do
      <%=class_name.classify%>.make_unsaved().should respond_to(:reserved_dates)
    end
  end

  describe "validations" do
    it "should contain at least one date" do
      <%=class_name%> = <%=class_name.classify%>.make()
      <%=class_name%>.reserved_dates = []
      <%=class_name%>.should_not be_valid
    end
  end

  describe "plugin methods" do
    describe "class method" do
      describe "additions" do
        it "should add a class method called reservation_strips_for_month" do
          <%=class_name.classify%>.respond_to?(:reservation_strips_for_month).should be_true
        end

        it "should add a class method called get_start_and_end_dates" do
          <%=class_name.classify%>.respond_to?(:get_start_and_end_dates).should be_true
        end

        it "should add a class method called reservations_for_date_range" do
          <%=class_name.classify%>.respond_to?(:reservations_for_date_range).should be_true
        end

        it "should add a class method called create_reservation_strips" do
          <%=class_name.classify%>.respond_to?(:create_reservation_strips).should be_true
        end

        it "should add a class method called space_in_current_strips?" do
          <%=class_name.classify%>.respond_to?(:space_in_current_strips?).should be_true
        end

        it "should add a class method called days_between" do
          <%=class_name.classify%>.respond_to?(:days_between).should be_true
        end

        it "should add a class method called beginning_of_week" do
          <%=class_name.classify%>.respond_to?(:beginning_of_week).should be_true
        end

      end
      
      describe "get_start_and_end_dates" do
        it "should find proper start and end dates when first day of week is sunday" do
          <%=class_name.classify%>.get_start_and_end_dates('11/17/2009'.to_date).should eql ['11/1/2009'.to_date, '12/6/2009'.to_date]
          <%=class_name.classify%>.get_start_and_end_dates('12/17/2009'.to_date).should eql ['11/29/2009'.to_date, '1/3/2010'.to_date]
          <%=class_name.classify%>.get_start_and_end_dates('1/17/2010'.to_date).should eql ['12/27/2009'.to_date, '2/7/2010'.to_date]
          <%=class_name.classify%>.get_start_and_end_dates('2/17/2010'.to_date).should eql ['1/31/2010'.to_date, '3/7/2010'.to_date]
          <%=class_name.classify%>.get_start_and_end_dates('3/17/2010'.to_date).should eql ['2/28/2010'.to_date, '4/4/2010'.to_date]
          <%=class_name.classify%>.get_start_and_end_dates('9/17/2010'.to_date).should eql ['8/29/2010'.to_date, '10/3/2010'.to_date]
        end

        it "should find proper start and end dates when first day of week is monday" do
          <%=class_name.classify%>.get_start_and_end_dates('11/17/2009'.to_date,1).should eql ['10/26/2009'.to_date, '12/7/2009'.to_date]
          <%=class_name.classify%>.get_start_and_end_dates('12/17/2009'.to_date,1).should eql ['11/30/2009'.to_date, '1/4/2010'.to_date]
          <%=class_name.classify%>.get_start_and_end_dates('1/17/2010'.to_date,1).should eql ['12/28/2009'.to_date, '2/1/2010'.to_date]
          <%=class_name.classify%>.get_start_and_end_dates('2/17/2010'.to_date,1).should eql ['2/1/2010'.to_date, '3/1/2010'.to_date]
          <%=class_name.classify%>.get_start_and_end_dates('3/17/2010'.to_date,1).should eql ['3/1/2010'.to_date, '4/5/2010'.to_date]
          <%=class_name.classify%>.get_start_and_end_dates('9/17/2010'.to_date,1).should eql ['8/30/2010'.to_date, '10/4/2010'.to_date]
        end
      end

      describe "reservations_for_date_range" do
        before(:each) do
          @<%=class_name%>1 = <%=class_name.classify%>.make(:id => 11, :reserved_dates => [
            <%=subclass_name.classify%>.make(:date => '11/12/2009'),
            <%=subclass_name.classify%>.make(:date => '11/13/2009'),
            <%=subclass_name.classify%>.make(:date => '11/14/2009'),
            <%=subclass_name.classify%>.make(:date => '11/11/2009'),
            <%=subclass_name.classify%>.make(:date => '11/10/2009'),
            <%=subclass_name.classify%>.make(:date => '11/15/2009'),
            <%=subclass_name.classify%>.make(:date => '11/16/2009')
          ])
          @<%=class_name%>2 = <%=class_name.classify%>.make(:id => 12, :reserved_dates => [
            <%=subclass_name.classify%>.make(:date => '11/13/2009'),
            <%=subclass_name.classify%>.make(:date => '11/14/2009'),
            <%=subclass_name.classify%>.make(:date => '11/15/2009'),
            <%=subclass_name.classify%>.make(:date => '11/16/2009'),
            <%=subclass_name.classify%>.make(:date => '11/17/2009'),
            <%=subclass_name.classify%>.make(:date => '11/18/2009'),
            <%=subclass_name.classify%>.make(:date => '11/19/2009')
          ])
          @<%=class_name%>3 = <%=class_name.classify%>.make(:id => 10, :reserved_dates => [
            <%=subclass_name.classify%>.make(:date => '11/2/2009'),
            <%=subclass_name.classify%>.make(:date => '11/3/2009'),
            <%=subclass_name.classify%>.make(:date => '11/4/2009'),
            <%=subclass_name.classify%>.make(:date => '11/5/2009'),
            <%=subclass_name.classify%>.make(:date => '11/6/2009'),
            <%=subclass_name.classify%>.make(:date => '11/7/2009'),
            <%=subclass_name.classify%>.make(:date => '11/8/2009')
          ])
        end

        it "should find <%=class_name%>s with dates entirely within the range" do
          <%=class_name.classify%>.reservations_for_date_range('11/1/2009','11/9/2009').should eql [@<%=class_name%>3]
        end

        it "should find <%=class_name%>s with dates both in and outside the specified range" do
          #since there's no gaurantee of the order they'll be returned, I compare
          #arrays by finding the intersection.  If the intersection is empty, then they are the same.
          (<%=class_name.classify%>.reservations_for_date_range('11/10/2009','11/14/2009') - [@<%=class_name%>1, @<%=class_name%>2]).should == []
        end

        it "should not find <%=class_name%>s with dates entirely outside the specified range" do
          <%=class_name.classify%>.reservations_for_date_range('12/10/2009','12/14/2009').should == []
        end
      end

      describe "create_reservation_strips" do
        it "should create the three following strips given the four <%=class_name%>s herewithin" do

          @res1 = <%=class_name.classify%>.make(:reserved_dates => [
            <%=subclass_name.classify%>.make(:date => '1/15/2010'),
            <%=subclass_name.classify%>.make(:date => '1/16/2010'),
            <%=subclass_name.classify%>.make(:date => '2/1/2010'),
            <%=subclass_name.classify%>.make(:date => '2/2/2010')
          ])
          @res2 = <%=class_name.classify%>.make(:reserved_dates => [
            <%=subclass_name.classify%>.make(:date => '2/3/2010'),
            <%=subclass_name.classify%>.make(:date => '2/4/2010')
          ])
          @res3 = <%=class_name.classify%>.make(:reserved_dates => [
            <%=subclass_name.classify%>.make(:date => '2/1/2010'),
            <%=subclass_name.classify%>.make(:date => '2/3/2010'),
            <%=subclass_name.classify%>.make(:date => '1/1/2010'),
            <%=subclass_name.classify%>.make(:date => '1/3/2010'),
            <%=subclass_name.classify%>.make(:date => '3/11/2010'),
            <%=subclass_name.classify%>.make(:date => '3/12/2010')
          ])
          @res4 = <%=class_name.classify%>.make(:reserved_dates => [
            <%=subclass_name.classify%>.make(:date => '2/3/2010'),
            <%=subclass_name.classify%>.make(:date => '2/4/2010')
          ])
          @res5 = <%=class_name.classify%>.make(:reserved_dates => [
            <%=subclass_name.classify%>.make(:date => '2/10/2010'),
            <%=subclass_name.classify%>.make(:date => '2/11/2010')
          ])
          @<%=class_name%>s = [@res1, @res2, @res3, @res4, @res5]
          @expected_strips = [
            [@res1, @res1, @res2, @res2, nil, nil, nil, nil, nil, @res5, @res5, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil],
            [@res3, nil, @res3, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil],
            [nil, nil, @res4, @res4, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil]
          ]
          <%=class_name.classify%>.create_reservation_strips('2/1/2010'.to_date,'2/28/2010'.to_date, @<%=class_name%>s).should == @expected_strips
        end
      end

      describe "space_in_current_strips?" do
        before(:each) do
          @strips = [
            [1, 1, 2, 2, nil, nil, nil, nil, nil, 5, 5, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil],
            [3, nil, 3, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil],
            [nil, nil, 4, 4, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil]
          ]
        end
        it "should return nil if there is no space in the set of strips that were passed in" do
          #this <%=class_name%> won't fit because there is already something on feb 3rd in all three strips
          non_fitting_range = [2,3,9,10]
          <%=class_name.classify%>.space_in_current_strips?(@strips, non_fitting_range).should == nil
        end

        it "should return the second strip (of the test strips) if the first strip has a conflict and the second one doesn't" do
          #this <%=class_name%> won't fit because there is already something on feb 3rd in all three strips
          range_to_fit_second_strip = [1,3,9,10]
          <%=class_name.classify%>.space_in_current_strips?(@strips, range_to_fit_second_strip).should == @strips[1]
        end

      end

      describe "days_between" do
        it "should be 7 days to the beginning of the week if today is Saturday and the week starts on Sunday" do
          <%=class_name.classify%>.days_between(0, 7).should == 7
        end
        it "should be 5 days to the beginning of the week if today is Monday and the week starts on Wednesday" do
          <%=class_name.classify%>.days_between(3, 1).should == 5
        end
      end

      describe "beginning of week" do
        it "should be feb 15th if the week starts on monday and the current date is feb 18th 2010" do
          <%=class_name.classify%>.beginning_of_week('2/18/2010'.to_date, 1).should == '2/15/2010'.to_date
        end

        it "should be aug 12th if the week starts on thursday and the current date is aug 15th 2010" do
          <%=class_name.classify%>.beginning_of_week('8/15/2010'.to_date, 4).should == '8/12/2010'.to_date
        end
      end

    end

    describe "instance methods" do
      describe "additions" do
        it "should add an instance method called color" do
          <%=class_name.classify%>.make_unsaved().respond_to?(:color).should be_true
        end

        it "should add an instance method called days" do
          <%=class_name.classify%>.make_unsaved().respond_to?(:days).should be_true
        end

      end

      describe "color" do
        it "should return the color set on the <%=class_name%>" do
          <%=class_name.classify%>.make(:color => 'white').color.should == 'white'
        end

        it "should return '#9aa4ad' if color isn't set for the <%=class_name%>" do
          <%=class_name.classify%>.make().color.should == '#9aa4ad'
        end
      end

      describe "days" do
        it "should return the size of the reserved_dates array" do
          <%=class_name%> = <%=class_name.classify%>.make(:reserved_dates => [
            <%=subclass_name.classify%>.make(:date => '2/1/2010'),
            <%=subclass_name.classify%>.make(:date => '2/3/2010'),
            <%=subclass_name.classify%>.make(:date => '1/1/2010'),
            <%=subclass_name.classify%>.make(:date => '1/3/2010'),
            <%=subclass_name.classify%>.make(:date => '3/11/2010'),
            <%=subclass_name.classify%>.make(:date => '3/12/2010')
          ])

          <%=class_name%>.days.should == 6
        end
      end
    end

  end


end